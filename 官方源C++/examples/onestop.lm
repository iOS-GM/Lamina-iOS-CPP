// ============================================================================
// Lamina One-Stop Test - 测试README.md中提到的所有功能
// ============================================================================

print("=== Lamina One-Stop 综合测试开始 ===");
print();

// 1. 基本数据类型测试
print("--- 1. 基本数据类型测试 ---");
var num_int = 42;
var num_float = 3.14159;
var flag_true = true;
var flag_false = false;
var text = "Hello Lamina!";
var empty = null;

print("整数:", num_int);
print("浮点数:", num_float);
print("布尔值:", flag_true, flag_false);
print("字符串:", text);
print("空值:", empty);
print();

// 2. 配置定义测试
print("--- 2. 配置定义测试 ---");
define MAX_RECURSION_DEPTH 30;

bigint big_num = 12345;
print("大整数:", big_num);

bigint factorial_8 = 8!;
print("8! (BigInt):", factorial_8);

// 测试大阶乘直接赋值（已修复的功能）
bigint large_factorial = 25!;
print("25! (大阶乘 BigInt):", large_factorial);
print();

// ============================================================================
// 3. 数组和矩阵测试
// ============================================================================
print("--- 3. 数组和矩阵测试 ---");
var arr = [1, 2, 3, 4, 5];
var matrix_2x2 = [[1, 2], [3, 4]];

print("数组:", arr);
print("矩阵:", matrix_2x2);
print();

// ============================================================================
// 4. 算术运算符测试
// ============================================================================
print("--- 4. 算术运算符测试 ---");
print("加法: 2 + 3 =", 2 + 3);
print("减法: 5 - 2 =", 5 - 2);
print("乘法: 4 * 3 =", 4 * 3);
print("除法: 7 / 2 =", 7 / 2);
print("取模: 7 % 3 =", 7 % 3);
print("幂运算: 2^3 =", 2^3);
print("阶乘: 5! =", 5!);
print("字符串连接:", "Hello" + " " + "World!");
print();

// ============================================================================
// 5. 向量运算测试
// ============================================================================
print("--- 5. 向量运算测试 ---");
var vec1 = [1, 2];
var vec2 = [3, 4];

print("向量1:", vec1);
print("向量2:", vec2);
print("向量加法:", vec1 + vec2);
print("标量乘法:", 2 * vec1);
print();

// ============================================================================
// 6. 比较运算符测试
// ============================================================================
print("--- 6. 比较运算符测试 ---");
print("5 == 5:", 5 == 5);
print("3 != 4:", 3 != 4);
print("5 > 3:", 5 > 3);
print("2 < 1:", 2 < 1);
print("4 >= 4:", 4 >= 4);
print("3 <= 2:", 3 <= 2);
print();

// ============================================================================
// 7. 条件语句测试
// ============================================================================
print("--- 7. 条件语句测试 ---");
var test_num = 10;
if (test_num > 0) {
    print("数字是正数");
} else if (test_num < 0) {
    print("数字是负数");
} else {
    print("数字是零");
}
print();

print();

// ============================================================================
// 8. 循环测试
// ============================================================================
print("--- 8. while循环测试 ---");
var i = 0;
print("准备进入循环，i =", i);
while (i < 5) {
    print("循环计数:", i);
    i = i + 1;
}
print("循环完成");
print();
var i = 0;
print("准备进入循环，i =", i);
while (i < 5) {
    print("循环计数:", i);
    i = i + 1;
}
print("循环完成");
print();

// ============================================================================
// 9. 函数定义和调用测试
// ============================================================================
print("--- 9. 函数定义和调用测试 ---");

func add(a, b) {
    return a + b;
}

func max_value(a, b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

print("加法函数: add(5, 3) =", add(5, 3));
print("最大值函数: max_value(10, 7) =", max_value(10, 7));
print();

// ============================================================================
// 10. 递归函数测试
// ============================================================================
print("--- 10. 递归函数测试 ---");

func factorial_recursive(n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial_recursive(n - 1);
}

print("递归阶乘: factorial_recursive(6) =", factorial_recursive(6));
print();

// ============================================================================
// 11. 数学函数测试
// ============================================================================
print("--- 11. 内建数学函数测试 ---");
print("sqrt(16) =", sqrt(16));
print("abs(-5) =", abs(-5));
print("idiv(15, 4) =", idiv(15, 4));
print("sin(0) =", sin(0));
print("cos(0) =", cos(0));
print("round(3.7) =", round(3.7));
print("floor(3.9) =", floor(3.9));
print("ceil(3.1) =", ceil(3.1));
print();

// ============================================================================
// 11.5. 分数转换函数测试
// ============================================================================
print("--- 11.5. 分数转换函数测试 ---");
print("fraction(0.5) =", fraction(0.5));
print("fraction(0.75) =", fraction(0.75));
print("fraction(0.125) =", fraction(0.125));
print("fraction(0.333333) =", fraction(0.333333));
print("decimal(1/2) =", decimal(1/2));
print("decimal(3/4) =", decimal(3/4));
print("decimal(1/8) =", decimal(1/8));
print("decimal(1/3) =", decimal(1/3));

print("精确计算示例:");
var exact_calc = fraction(0.1) + fraction(0.2);
print("fraction(0.1) + fraction(0.2) =", exact_calc);
print("转为小数:", decimal(exact_calc));
print();

// ============================================================================
// 12. 向量/矩阵函数测试
// ============================================================================
print("--- 12. 向量/矩阵函数测试 ---");
var vector_a = [1, 2];
var vector_b = [3, 4];
var vector_3d_a = [1, 0, 0];
var vector_3d_b = [0, 1, 0];

print("点积: dot([1,2], [3,4]) =", dot(vector_a, vector_b));
print("叉积: cross([1,0,0], [0,1,0]) =", cross(vector_3d_a, vector_3d_b));
print("向量模长: norm([3,4]) =", norm([3, 4]));
print("矩阵行列式: det([[1,2],[3,4]]) =", det([[1, 2], [3, 4]]));
print();

// ============================================================================
// 13. 工具函数测试
// ============================================================================
print("--- 13. 工具函数测试 ---");
var created_array = [1, 2, 3, 4, 5];  // 直接创建数组
print("直接创建数组 [1,2,3,4,5] =", created_array);
print("size([1,2,3]) =", size([1, 2, 3]));
print("size(\"Hello\") =", size("Hello"));
print();

// ============================================================================
// 14. 流程控制测试
// ============================================================================
print("--- 14. 流程控制测试 ---");

print("测试break:");
var j = 0;
while (j < 10) {
    if (j == 3) {
        print("遇到3，跳出循环");
        break;
    }
    print("j =", j);
    j = j + 1;
}

print("测试continue:");
var k = 0;
while (k < 5) {
    k = k + 1;
    if (k == 3) {
        print("跳过3");
        continue;
    }
    print("k =", k);
}
print();

// ============================================================================
// 15. 复杂示例：二次方程求解
// ============================================================================
print("--- 15. 复杂示例：二次方程求解 ---");

func quadratic_solver(a, b, c) {
    var discriminant = b^2 - 4*a*c;
    if (discriminant < 0) {
        print("复数根（当前版本不支持）");
        return null;
    } else {
        var root1 = (-b + sqrt(discriminant)) / (2*a);
        var root2 = (-b - sqrt(discriminant)) / (2*a);
        return [root1, root2];
    }
}

print("求解方程 x^2 - 5x + 6 = 0:");
var roots = quadratic_solver(1, -5, 6);
if (roots != null) {
    print("根:", roots);
}
print();

// ============================================================================
// 测试总结
// ============================================================================
print("=== Lamina One-Stop 综合测试完成 ===");
print();
print("测试覆盖的功能包括:");
print(" 基本数据类型");
print(" 配置定义");
print(" BigInt 大整数支持（含大阶乘）");
print(" 数组和矩阵");
print(" 算术运算符");
print(" 向量运算");
print(" 比较运算符");
print(" 条件语句");
print(" 循环结构");
print(" 函数定义和调用");
print(" 递归函数");
print(" 内建数学函数");
print(" 分数转换函数");
print(" 向量/矩阵函数");
print(" 工具函数");
print(" 流程控制");
print(" 复杂计算示例");
print();
print("所有功能测试完成！");
